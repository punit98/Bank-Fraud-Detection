{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "esbodznSzuni"
   },
   "source": [
    "# Portfolio 5\n",
    "\n",
    "## 1. Import the dataset and explore the data\n",
    "\n",
    "I am running this script in Google Colab - so you might want to change the location of the dataset and remove the 1st cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Bd_g3uxr1Me1",
    "outputId": "01b385a3-ea84-47eb-fa70-4ebd11cc57ff"
   },
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'google.colab'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-d5df0069828e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdrive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdrive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'google.colab'"
     ]
    }
   ],
   "source": [
    "from google.colab import drive\n",
    "drive.mount('/content/drive')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "T1BIFYy4zunq",
    "outputId": "6e1a834f-0bf7-4291-8636-85ea4632a5ed"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>step</th>\n",
       "      <th>customer</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>zipcodeOri</th>\n",
       "      <th>merchant</th>\n",
       "      <th>zipMerchant</th>\n",
       "      <th>category</th>\n",
       "      <th>amount</th>\n",
       "      <th>fraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>'C1093826151'</td>\n",
       "      <td>'4'</td>\n",
       "      <td>'M'</td>\n",
       "      <td>'28007'</td>\n",
       "      <td>'M348934600'</td>\n",
       "      <td>'28007'</td>\n",
       "      <td>'es_transportation'</td>\n",
       "      <td>4.55</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>'C352968107'</td>\n",
       "      <td>'2'</td>\n",
       "      <td>'M'</td>\n",
       "      <td>'28007'</td>\n",
       "      <td>'M348934600'</td>\n",
       "      <td>'28007'</td>\n",
       "      <td>'es_transportation'</td>\n",
       "      <td>39.68</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>'C2054744914'</td>\n",
       "      <td>'4'</td>\n",
       "      <td>'F'</td>\n",
       "      <td>'28007'</td>\n",
       "      <td>'M1823072687'</td>\n",
       "      <td>'28007'</td>\n",
       "      <td>'es_transportation'</td>\n",
       "      <td>26.89</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>'C1760612790'</td>\n",
       "      <td>'3'</td>\n",
       "      <td>'M'</td>\n",
       "      <td>'28007'</td>\n",
       "      <td>'M348934600'</td>\n",
       "      <td>'28007'</td>\n",
       "      <td>'es_transportation'</td>\n",
       "      <td>17.25</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>'C757503768'</td>\n",
       "      <td>'5'</td>\n",
       "      <td>'M'</td>\n",
       "      <td>'28007'</td>\n",
       "      <td>'M348934600'</td>\n",
       "      <td>'28007'</td>\n",
       "      <td>'es_transportation'</td>\n",
       "      <td>35.72</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   step       customer  age  ...             category amount fraud\n",
       "0     0  'C1093826151'  '4'  ...  'es_transportation'   4.55     0\n",
       "1     0   'C352968107'  '2'  ...  'es_transportation'  39.68     0\n",
       "2     0  'C2054744914'  '4'  ...  'es_transportation'  26.89     0\n",
       "3     0  'C1760612790'  '3'  ...  'es_transportation'  17.25     0\n",
       "4     0   'C757503768'  '5'  ...  'es_transportation'  35.72     0\n",
       "\n",
       "[5 rows x 10 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "data = pd.read_csv(\"/content/drive/MyDrive/data/bs140513_032310.csv\")\n",
    "\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "5RH0V2osC0a4"
   },
   "source": [
    "## Addressing the imbalance in data\n",
    "\n",
    "From the data description, we know that there are about 600,000 rows of data and only 7200 fraud transactions which is 1.2% of the data which means that there is a massive imbalance in the data.\n",
    "\n",
    "Assuming that in a real world situation, the number of fraud transactions is very low, so, at first, I will not oversample the data to remove the imbalance in the data. First I will try classifying algorithms on the original dataset and evaluate the results. After that I will repeat the process after removing the imbalance in the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 681
    },
    "id": "qhXCf0Mdzunv",
    "outputId": "e9535a77-51b6-4206-c4dd-8ba99545acd3"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f0357936e10>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f0347f19940>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f0347ed0ba8>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7f0347e85e10>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f0347ead320>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f0347dee8d0>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7f0347e21b38>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f0347dd5d68>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f0347dd5dd8>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 3,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.plotting.scatter_matrix(data, figsize = (10,8))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "TChb4pkDzunx",
    "outputId": "a7ae4e52-beb9-41f7-8d67-a685d4b5fcd6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "step             180\n",
      "customer        4112\n",
      "age                8\n",
      "gender             4\n",
      "zipcodeOri         1\n",
      "merchant          50\n",
      "zipMerchant        1\n",
      "category          15\n",
      "amount         23767\n",
      "fraud              2\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(data.nunique())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "P9VOpdwVzun0"
   },
   "source": [
    "### Inference\n",
    "\n",
    "According to the kaggle description of the data, the step parameter shows during which step was a particular transaction added to the dataset in the datacollection process. Since it does not add any important information to this dataset, we can safely drop the \"step\" column.\n",
    "\n",
    "According to the BankSim paper [BankSim], the \"age\" column has categortical values with 0 being age <= 18 and 6 being >65, and U is unknown value. we will procecss Age column as categorical.\n",
    "\n",
    "The gender column is also categorical with values \"Male\", \"Female\", \"Enterprise\" and \"Unknown\"\n",
    "\n",
    "There are 15 unique values in the \"category\" column so it will also be treated as categorical data.\n",
    "\n",
    "The fraud column is the output variable where 0 means that the transaction was not fraud and 1 means that the transaction was fraud.\n",
    "\n",
    "\n",
    "We see that there only one value in the \"zipMerchant\" and \"zipcodeOri\" columns. so we can drop these columns.\n",
    "\n",
    "There is also extra ' ' as the suffix and prefix in the data, so we need to remove that as well."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WKmw6Iuwzun3"
   },
   "source": [
    "## 2. Datacleaning and preprocessing\n",
    "\n",
    "First we drop the NaN values in the dataset.\n",
    "\n",
    "Then I drop the columns which will not be used.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "-vxkcdl6zun5",
    "outputId": "acb50602-41c3-4a8d-f00a-12ef948f93d1"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>merchant</th>\n",
       "      <th>category</th>\n",
       "      <th>amount</th>\n",
       "      <th>fraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>C1093826151</td>\n",
       "      <td>4</td>\n",
       "      <td>M</td>\n",
       "      <td>M348934600</td>\n",
       "      <td>es_transportation</td>\n",
       "      <td>4.55</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>C352968107</td>\n",
       "      <td>2</td>\n",
       "      <td>M</td>\n",
       "      <td>M348934600</td>\n",
       "      <td>es_transportation</td>\n",
       "      <td>39.68</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>C2054744914</td>\n",
       "      <td>4</td>\n",
       "      <td>F</td>\n",
       "      <td>M1823072687</td>\n",
       "      <td>es_transportation</td>\n",
       "      <td>26.89</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>C1760612790</td>\n",
       "      <td>3</td>\n",
       "      <td>M</td>\n",
       "      <td>M348934600</td>\n",
       "      <td>es_transportation</td>\n",
       "      <td>17.25</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>C757503768</td>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>M348934600</td>\n",
       "      <td>es_transportation</td>\n",
       "      <td>35.72</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      customer age gender     merchant           category  amount  fraud\n",
       "0  C1093826151   4      M   M348934600  es_transportation    4.55      0\n",
       "1   C352968107   2      M   M348934600  es_transportation   39.68      0\n",
       "2  C2054744914   4      F  M1823072687  es_transportation   26.89      0\n",
       "3  C1760612790   3      M   M348934600  es_transportation   17.25      0\n",
       "4   C757503768   5      M   M348934600  es_transportation   35.72      0"
      ]
     },
     "execution_count": 5,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = data.dropna()\n",
    "data = data.drop([\"step\", \"zipcodeOri\", \"zipMerchant\"],  axis = 1)\n",
    "\n",
    "data['customer'] = data['customer'].str.replace(\"\\'\", \"\")\n",
    "data['age'] = data['age'].str.replace(\"\\'\", \"\")\n",
    "data['gender'] = data['gender'].str.replace(\"\\'\", \"\")\n",
    "data['merchant'] = data['merchant'].str.replace(\"\\'\", \"\")\n",
    "data['category'] = data['category'].str.replace(\"\\'\", \"\")\n",
    "\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "c9xWpLPIzun7"
   },
   "source": [
    "\n",
    "Now I will labelencode the columns which have string values, that is, customer, age, gender, merchant and category columns.\n",
    "\n",
    "And then I will scale the data using StandardScaler.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "H82Kjwuizun7",
    "outputId": "adcaa5ca-0082-48d5-ff00-d549e784fb6b"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>merchant</th>\n",
       "      <th>category</th>\n",
       "      <th>amount</th>\n",
       "      <th>fraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>210</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>30</td>\n",
       "      <td>12</td>\n",
       "      <td>4.55</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2753</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>30</td>\n",
       "      <td>12</td>\n",
       "      <td>39.68</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2285</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>12</td>\n",
       "      <td>26.89</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1650</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>30</td>\n",
       "      <td>12</td>\n",
       "      <td>17.25</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3585</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>30</td>\n",
       "      <td>12</td>\n",
       "      <td>35.72</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   customer  age  gender  merchant  category  amount  fraud\n",
       "0       210    4       2        30        12    4.55      0\n",
       "1      2753    2       2        30        12   39.68      0\n",
       "2      2285    4       1        18        12   26.89      0\n",
       "3      1650    3       2        30        12   17.25      0\n",
       "4      3585    5       2        30        12   35.72      0"
      ]
     },
     "execution_count": 6,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
    "le = LabelEncoder()\n",
    "\n",
    "data[\"customer\"] = le.fit_transform(data[\"customer\"])\n",
    "data[\"age\"] = le.fit_transform(data[\"age\"])\n",
    "data[\"gender\"] = le.fit_transform(data[\"gender\"])\n",
    "data[\"merchant\"] = le.fit_transform(data[\"merchant\"])\n",
    "data[\"category\"] = le.fit_transform(data[\"category\"])\n",
    "data.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 226
    },
    "id": "1EFmKw_ezuoD",
    "outputId": "3ab73edf-1cf1-4a5f-ceff-19262f70d830"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>11</th>\n",
       "      <th>12</th>\n",
       "      <th>13</th>\n",
       "      <th>14</th>\n",
       "      <th>15</th>\n",
       "      <th>16</th>\n",
       "      <th>17</th>\n",
       "      <th>18</th>\n",
       "      <th>19</th>\n",
       "      <th>20</th>\n",
       "      <th>21</th>\n",
       "      <th>22</th>\n",
       "      <th>23</th>\n",
       "      <th>24</th>\n",
       "      <th>25</th>\n",
       "      <th>26</th>\n",
       "      <th>27</th>\n",
       "      <th>28</th>\n",
       "      <th>29</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.299276</td>\n",
       "      <td>-1.545620</td>\n",
       "      <td>0.714001</td>\n",
       "      <td>-0.064347</td>\n",
       "      <td>-0.329165</td>\n",
       "      <td>-0.678119</td>\n",
       "      <td>-0.573390</td>\n",
       "      <td>2.110495</td>\n",
       "      <td>-0.343144</td>\n",
       "      <td>-0.217136</td>\n",
       "      <td>-0.044553</td>\n",
       "      <td>-0.044553</td>\n",
       "      <td>-1.096241</td>\n",
       "      <td>1.102558</td>\n",
       "      <td>-0.029442</td>\n",
       "      <td>-0.104084</td>\n",
       "      <td>-0.038607</td>\n",
       "      <td>-0.10475</td>\n",
       "      <td>-0.214919</td>\n",
       "      <td>-0.166994</td>\n",
       "      <td>-0.057888</td>\n",
       "      <td>-0.054235</td>\n",
       "      <td>-0.10179</td>\n",
       "      <td>-0.02898</td>\n",
       "      <td>-0.039192</td>\n",
       "      <td>-0.082315</td>\n",
       "      <td>-0.063258</td>\n",
       "      <td>0.420991</td>\n",
       "      <td>-0.035011</td>\n",
       "      <td>-0.161339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.016067</td>\n",
       "      <td>0.599484</td>\n",
       "      <td>0.714001</td>\n",
       "      <td>-0.064347</td>\n",
       "      <td>-0.329165</td>\n",
       "      <td>1.474668</td>\n",
       "      <td>-0.573390</td>\n",
       "      <td>-0.473822</td>\n",
       "      <td>-0.343144</td>\n",
       "      <td>-0.217136</td>\n",
       "      <td>-0.044553</td>\n",
       "      <td>-0.044553</td>\n",
       "      <td>-1.096241</td>\n",
       "      <td>1.102558</td>\n",
       "      <td>-0.029442</td>\n",
       "      <td>-0.104084</td>\n",
       "      <td>-0.038607</td>\n",
       "      <td>-0.10475</td>\n",
       "      <td>-0.214919</td>\n",
       "      <td>-0.166994</td>\n",
       "      <td>-0.057888</td>\n",
       "      <td>-0.054235</td>\n",
       "      <td>-0.10179</td>\n",
       "      <td>-0.02898</td>\n",
       "      <td>-0.039192</td>\n",
       "      <td>-0.082315</td>\n",
       "      <td>-0.063258</td>\n",
       "      <td>0.420991</td>\n",
       "      <td>-0.035011</td>\n",
       "      <td>-0.161339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.098742</td>\n",
       "      <td>0.204710</td>\n",
       "      <td>-0.682938</td>\n",
       "      <td>-0.064347</td>\n",
       "      <td>-0.329165</td>\n",
       "      <td>-0.678119</td>\n",
       "      <td>-0.573390</td>\n",
       "      <td>2.110495</td>\n",
       "      <td>-0.343144</td>\n",
       "      <td>-0.217136</td>\n",
       "      <td>-0.044553</td>\n",
       "      <td>-0.044553</td>\n",
       "      <td>0.912208</td>\n",
       "      <td>-0.906982</td>\n",
       "      <td>-0.029442</td>\n",
       "      <td>-0.104084</td>\n",
       "      <td>-0.038607</td>\n",
       "      <td>-0.10475</td>\n",
       "      <td>-0.214919</td>\n",
       "      <td>-0.166994</td>\n",
       "      <td>-0.057888</td>\n",
       "      <td>-0.054235</td>\n",
       "      <td>-0.10179</td>\n",
       "      <td>-0.02898</td>\n",
       "      <td>-0.039192</td>\n",
       "      <td>-0.082315</td>\n",
       "      <td>-0.063258</td>\n",
       "      <td>0.420991</td>\n",
       "      <td>-0.035011</td>\n",
       "      <td>-0.161339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.185275</td>\n",
       "      <td>-0.330933</td>\n",
       "      <td>0.714001</td>\n",
       "      <td>-0.064347</td>\n",
       "      <td>-0.329165</td>\n",
       "      <td>-0.678119</td>\n",
       "      <td>1.744015</td>\n",
       "      <td>-0.473822</td>\n",
       "      <td>-0.343144</td>\n",
       "      <td>-0.217136</td>\n",
       "      <td>-0.044553</td>\n",
       "      <td>-0.044553</td>\n",
       "      <td>-1.096241</td>\n",
       "      <td>1.102558</td>\n",
       "      <td>-0.029442</td>\n",
       "      <td>-0.104084</td>\n",
       "      <td>-0.038607</td>\n",
       "      <td>-0.10475</td>\n",
       "      <td>-0.214919</td>\n",
       "      <td>-0.166994</td>\n",
       "      <td>-0.057888</td>\n",
       "      <td>-0.054235</td>\n",
       "      <td>-0.10179</td>\n",
       "      <td>-0.02898</td>\n",
       "      <td>-0.039192</td>\n",
       "      <td>-0.082315</td>\n",
       "      <td>-0.063258</td>\n",
       "      <td>0.420991</td>\n",
       "      <td>-0.035011</td>\n",
       "      <td>-0.161339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.019480</td>\n",
       "      <td>1.301303</td>\n",
       "      <td>0.714001</td>\n",
       "      <td>-0.064347</td>\n",
       "      <td>-0.329165</td>\n",
       "      <td>-0.678119</td>\n",
       "      <td>-0.573390</td>\n",
       "      <td>-0.473822</td>\n",
       "      <td>2.914227</td>\n",
       "      <td>-0.217136</td>\n",
       "      <td>-0.044553</td>\n",
       "      <td>-0.044553</td>\n",
       "      <td>-1.096241</td>\n",
       "      <td>1.102558</td>\n",
       "      <td>-0.029442</td>\n",
       "      <td>-0.104084</td>\n",
       "      <td>-0.038607</td>\n",
       "      <td>-0.10475</td>\n",
       "      <td>-0.214919</td>\n",
       "      <td>-0.166994</td>\n",
       "      <td>-0.057888</td>\n",
       "      <td>-0.054235</td>\n",
       "      <td>-0.10179</td>\n",
       "      <td>-0.02898</td>\n",
       "      <td>-0.039192</td>\n",
       "      <td>-0.082315</td>\n",
       "      <td>-0.063258</td>\n",
       "      <td>0.420991</td>\n",
       "      <td>-0.035011</td>\n",
       "      <td>-0.161339</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         0         1         2   ...        27        28        29\n",
       "0 -0.299276 -1.545620  0.714001  ...  0.420991 -0.035011 -0.161339\n",
       "1  0.016067  0.599484  0.714001  ...  0.420991 -0.035011 -0.161339\n",
       "2 -0.098742  0.204710 -0.682938  ...  0.420991 -0.035011 -0.161339\n",
       "3 -0.185275 -0.330933  0.714001  ...  0.420991 -0.035011 -0.161339\n",
       "4 -0.019480  1.301303  0.714001  ...  0.420991 -0.035011 -0.161339\n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "data_x = data[data.columns.difference([\"fraud\"])]\n",
    "data_y = data['fraud']\n",
    "\n",
    "data_x = pd.get_dummies(data_x, columns=['age', 'gender', 'category'])\n",
    "\n",
    "sc = StandardScaler()\n",
    "data_x = sc.fit_transform(data_x)\n",
    "data_x = pd.DataFrame(data_x)\n",
    "data_x.head()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "0JdwgzK7Hvr_",
    "outputId": "08b73f1e-6757-41ca-a167-8bae18f23eed"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0     23767\n",
      "1      4112\n",
      "2        50\n",
      "3         2\n",
      "4         2\n",
      "5         2\n",
      "6         2\n",
      "7         2\n",
      "8         2\n",
      "9         2\n",
      "10        2\n",
      "11        2\n",
      "12        2\n",
      "13        2\n",
      "14        2\n",
      "15        2\n",
      "16        2\n",
      "17        2\n",
      "18        2\n",
      "19        2\n",
      "20        2\n",
      "21        2\n",
      "22        2\n",
      "23        2\n",
      "24        2\n",
      "25        2\n",
      "26        2\n",
      "27        2\n",
      "28        2\n",
      "29        2\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(data_x.nunique())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "JudAB_5kzun9"
   },
   "source": [
    "Now that label-encoding is done, I can one-hot-encode the categorical columns, which are age, gender and category. \n",
    "\n",
    "Then I will split the data into training set and testing set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 226
    },
    "id": "s0D0p-Twzun_",
    "outputId": "15330170-9fc0-4e27-a49a-9e6682629fd6"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>11</th>\n",
       "      <th>12</th>\n",
       "      <th>13</th>\n",
       "      <th>14</th>\n",
       "      <th>15</th>\n",
       "      <th>16</th>\n",
       "      <th>17</th>\n",
       "      <th>18</th>\n",
       "      <th>19</th>\n",
       "      <th>20</th>\n",
       "      <th>21</th>\n",
       "      <th>22</th>\n",
       "      <th>23</th>\n",
       "      <th>24</th>\n",
       "      <th>25</th>\n",
       "      <th>26</th>\n",
       "      <th>27</th>\n",
       "      <th>28</th>\n",
       "      <th>29</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.299276</td>\n",
       "      <td>-1.545620</td>\n",
       "      <td>0.714001</td>\n",
       "      <td>-0.064347</td>\n",
       "      <td>-0.329165</td>\n",
       "      <td>-0.678119</td>\n",
       "      <td>-0.573390</td>\n",
       "      <td>2.110495</td>\n",
       "      <td>-0.343144</td>\n",
       "      <td>-0.217136</td>\n",
       "      <td>-0.044553</td>\n",
       "      <td>-0.044553</td>\n",
       "      <td>-1.096241</td>\n",
       "      <td>1.102558</td>\n",
       "      <td>-0.029442</td>\n",
       "      <td>-0.104084</td>\n",
       "      <td>-0.038607</td>\n",
       "      <td>-0.10475</td>\n",
       "      <td>-0.214919</td>\n",
       "      <td>-0.166994</td>\n",
       "      <td>-0.057888</td>\n",
       "      <td>-0.054235</td>\n",
       "      <td>-0.10179</td>\n",
       "      <td>-0.02898</td>\n",
       "      <td>-0.039192</td>\n",
       "      <td>-0.082315</td>\n",
       "      <td>-0.063258</td>\n",
       "      <td>0.420991</td>\n",
       "      <td>-0.035011</td>\n",
       "      <td>-0.161339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.016067</td>\n",
       "      <td>0.599484</td>\n",
       "      <td>0.714001</td>\n",
       "      <td>-0.064347</td>\n",
       "      <td>-0.329165</td>\n",
       "      <td>1.474668</td>\n",
       "      <td>-0.573390</td>\n",
       "      <td>-0.473822</td>\n",
       "      <td>-0.343144</td>\n",
       "      <td>-0.217136</td>\n",
       "      <td>-0.044553</td>\n",
       "      <td>-0.044553</td>\n",
       "      <td>-1.096241</td>\n",
       "      <td>1.102558</td>\n",
       "      <td>-0.029442</td>\n",
       "      <td>-0.104084</td>\n",
       "      <td>-0.038607</td>\n",
       "      <td>-0.10475</td>\n",
       "      <td>-0.214919</td>\n",
       "      <td>-0.166994</td>\n",
       "      <td>-0.057888</td>\n",
       "      <td>-0.054235</td>\n",
       "      <td>-0.10179</td>\n",
       "      <td>-0.02898</td>\n",
       "      <td>-0.039192</td>\n",
       "      <td>-0.082315</td>\n",
       "      <td>-0.063258</td>\n",
       "      <td>0.420991</td>\n",
       "      <td>-0.035011</td>\n",
       "      <td>-0.161339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.098742</td>\n",
       "      <td>0.204710</td>\n",
       "      <td>-0.682938</td>\n",
       "      <td>-0.064347</td>\n",
       "      <td>-0.329165</td>\n",
       "      <td>-0.678119</td>\n",
       "      <td>-0.573390</td>\n",
       "      <td>2.110495</td>\n",
       "      <td>-0.343144</td>\n",
       "      <td>-0.217136</td>\n",
       "      <td>-0.044553</td>\n",
       "      <td>-0.044553</td>\n",
       "      <td>0.912208</td>\n",
       "      <td>-0.906982</td>\n",
       "      <td>-0.029442</td>\n",
       "      <td>-0.104084</td>\n",
       "      <td>-0.038607</td>\n",
       "      <td>-0.10475</td>\n",
       "      <td>-0.214919</td>\n",
       "      <td>-0.166994</td>\n",
       "      <td>-0.057888</td>\n",
       "      <td>-0.054235</td>\n",
       "      <td>-0.10179</td>\n",
       "      <td>-0.02898</td>\n",
       "      <td>-0.039192</td>\n",
       "      <td>-0.082315</td>\n",
       "      <td>-0.063258</td>\n",
       "      <td>0.420991</td>\n",
       "      <td>-0.035011</td>\n",
       "      <td>-0.161339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.185275</td>\n",
       "      <td>-0.330933</td>\n",
       "      <td>0.714001</td>\n",
       "      <td>-0.064347</td>\n",
       "      <td>-0.329165</td>\n",
       "      <td>-0.678119</td>\n",
       "      <td>1.744015</td>\n",
       "      <td>-0.473822</td>\n",
       "      <td>-0.343144</td>\n",
       "      <td>-0.217136</td>\n",
       "      <td>-0.044553</td>\n",
       "      <td>-0.044553</td>\n",
       "      <td>-1.096241</td>\n",
       "      <td>1.102558</td>\n",
       "      <td>-0.029442</td>\n",
       "      <td>-0.104084</td>\n",
       "      <td>-0.038607</td>\n",
       "      <td>-0.10475</td>\n",
       "      <td>-0.214919</td>\n",
       "      <td>-0.166994</td>\n",
       "      <td>-0.057888</td>\n",
       "      <td>-0.054235</td>\n",
       "      <td>-0.10179</td>\n",
       "      <td>-0.02898</td>\n",
       "      <td>-0.039192</td>\n",
       "      <td>-0.082315</td>\n",
       "      <td>-0.063258</td>\n",
       "      <td>0.420991</td>\n",
       "      <td>-0.035011</td>\n",
       "      <td>-0.161339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.019480</td>\n",
       "      <td>1.301303</td>\n",
       "      <td>0.714001</td>\n",
       "      <td>-0.064347</td>\n",
       "      <td>-0.329165</td>\n",
       "      <td>-0.678119</td>\n",
       "      <td>-0.573390</td>\n",
       "      <td>-0.473822</td>\n",
       "      <td>2.914227</td>\n",
       "      <td>-0.217136</td>\n",
       "      <td>-0.044553</td>\n",
       "      <td>-0.044553</td>\n",
       "      <td>-1.096241</td>\n",
       "      <td>1.102558</td>\n",
       "      <td>-0.029442</td>\n",
       "      <td>-0.104084</td>\n",
       "      <td>-0.038607</td>\n",
       "      <td>-0.10475</td>\n",
       "      <td>-0.214919</td>\n",
       "      <td>-0.166994</td>\n",
       "      <td>-0.057888</td>\n",
       "      <td>-0.054235</td>\n",
       "      <td>-0.10179</td>\n",
       "      <td>-0.02898</td>\n",
       "      <td>-0.039192</td>\n",
       "      <td>-0.082315</td>\n",
       "      <td>-0.063258</td>\n",
       "      <td>0.420991</td>\n",
       "      <td>-0.035011</td>\n",
       "      <td>-0.161339</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         0         1         2   ...        27        28        29\n",
       "0 -0.299276 -1.545620  0.714001  ...  0.420991 -0.035011 -0.161339\n",
       "1  0.016067  0.599484  0.714001  ...  0.420991 -0.035011 -0.161339\n",
       "2 -0.098742  0.204710 -0.682938  ...  0.420991 -0.035011 -0.161339\n",
       "3 -0.185275 -0.330933  0.714001  ...  0.420991 -0.035011 -0.161339\n",
       "4 -0.019480  1.301303  0.714001  ...  0.420991 -0.035011 -0.161339\n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "data_x.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "id": "1HKsJkkmHTs9"
   },
   "outputs": [],
   "source": [
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "x_train, x_test, y_train, y_test = train_test_split(data_x, data_y, train_size = 0.6)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "AA3h-Wr7zuoD"
   },
   "source": [
    "Now that we have a dataset that we can perform operations on, we can proceed with splitting the data into x and y and then into testing and training data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "1PL97-HUzuoE"
   },
   "source": [
    "\n",
    "Now that we have the data split up in different parts, we can apply machiine learning algorithms to the data.\n",
    "## i.) Applying Classification Algorithms\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uQ_c2axAzuoE"
   },
   "source": [
    "### a.) SVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "id": "orkzsmDvzuoF"
   },
   "outputs": [],
   "source": [
    "\n",
    "from sklearn.metrics import classification_report\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "PKQPBc75zuoF",
    "outputId": "a3059d64-6b72-4358-d568-a69d7f385748"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "true       0     1     All\n",
      "pred                      \n",
      "0     234745   930  235675\n",
      "1        245  1938    2183\n",
      "All   234990  2868  237858 \n",
      "\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00    234990\n",
      "           1       0.89      0.68      0.77      2868\n",
      "\n",
      "    accuracy                           1.00    237858\n",
      "   macro avg       0.94      0.84      0.88    237858\n",
      "weighted avg       0.99      1.00      0.99    237858\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from sklearn.svm import SVC\n",
    "svc = SVC()\n",
    "svc.fit(x_train, y_train)\n",
    "y_pred_svc = svc.predict(x_test)\n",
    "\n",
    "cm_svc = pd.crosstab(y_pred_svc, y_test, rownames = ['pred'], colnames = ['true'], margins = True)\n",
    "report_svc = classification_report(y_test, y_pred_svc, labels = [0, 1])\n",
    "print(cm_svc, '\\n\\n', report_svc)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "dqJf5MGEt7kN"
   },
   "source": [
    "SVC takea a lot of time to train the model so we will pass on it in the Cross-Validation data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "f_nGAiCnzuoF"
   },
   "source": [
    "### b.) Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "F_rcCoguzuoF",
    "outputId": "e5fa9492-56f7-471e-db94-e3cd74088d0a"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "true       0     1     All\n",
      "pred                      \n",
      "0     234787  1031  235818\n",
      "1        203  1837    2040\n",
      "All   234990  2868  237858 \n",
      "\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00    234990\n",
      "           1       0.90      0.64      0.75      2868\n",
      "\n",
      "    accuracy                           0.99    237858\n",
      "   macro avg       0.95      0.82      0.87    237858\n",
      "weighted avg       0.99      0.99      0.99    237858\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "lr = LogisticRegression()\n",
    "lr.fit(x_train, y_train)\n",
    "y_pred_lr = lr.predict(x_test)\n",
    "\n",
    "cm_lr = pd.crosstab(y_pred_lr, y_test, rownames = ['pred'], colnames = ['true'], margins = True)\n",
    "report_lr = classification_report(y_test, y_pred_lr, labels = [0, 1])\n",
    "print(cm_lr, '\\n\\n', report_lr)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "3UQ2KB4rzuoF"
   },
   "source": [
    "### c.) Random Forest Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "3XSSs8cGzuoG",
    "outputId": "ac68f404-1339-42ad-cac8-6d0cf17fa784"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "true       0     1     All\n",
      "pred                      \n",
      "0     234663   675  235338\n",
      "1        327  2193    2520\n",
      "All   234990  2868  237858 \n",
      "\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00    234990\n",
      "           1       0.87      0.76      0.81      2868\n",
      "\n",
      "    accuracy                           1.00    237858\n",
      "   macro avg       0.93      0.88      0.91    237858\n",
      "weighted avg       1.00      1.00      1.00    237858\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rfc = RandomForestClassifier()\n",
    "rfc.fit(x_train, y_train)\n",
    "y_pred_rfc = rfc.predict(x_test)\n",
    "\n",
    "cm_rfc = pd.crosstab(y_pred_rfc, y_test, rownames = ['pred'], colnames = ['true'], margins = True)\n",
    "report_rfc = classification_report(y_test, y_pred_rfc, labels = [0, 1])\n",
    "print(cm_rfc, '\\n\\n', report_rfc)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "DGB34i7IzuoG"
   },
   "source": [
    "### d.) Decision Tree Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "YTGmpr0izuoG",
    "outputId": "58663082-7e6d-495a-d5d8-2ab162f79500"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "true       0     1     All\n",
      "pred                      \n",
      "0     234196   630  234826\n",
      "1        794  2238    3032\n",
      "All   234990  2868  237858 \n",
      "\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00    234990\n",
      "           1       0.74      0.78      0.76      2868\n",
      "\n",
      "    accuracy                           0.99    237858\n",
      "   macro avg       0.87      0.89      0.88    237858\n",
      "weighted avg       0.99      0.99      0.99    237858\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "dtc = DecisionTreeClassifier()\n",
    "dtc.fit(x_train, y_train)\n",
    "y_pred_dtc = dtc.predict(x_test)\n",
    "\n",
    "cm_dtc = pd.crosstab(y_pred_dtc, y_test, rownames = ['pred'], colnames = ['true'], margins = True)\n",
    "report_dtc = classification_report(y_test, y_pred_dtc, labels = [0, 1])\n",
    "print(cm_dtc, '\\n\\n', report_dtc)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "wa-1uBXRzuoG"
   },
   "source": [
    "### e.) Ridge Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "zsRPGw-lzuoH",
    "outputId": "6a8c6cee-b2dd-4b92-eb79-1b86c3ecd189"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:144: FutureWarning: The sklearn.linear_model.ridge module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.linear_model. Anything that cannot be imported from sklearn.linear_model is now part of the private API.\n",
      "  warnings.warn(message, FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "true       0     1     All\n",
      "pred                      \n",
      "0     234196   630  234826\n",
      "1        794  2238    3032\n",
      "All   234990  2868  237858 \n",
      "\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00    234990\n",
      "           1       0.74      0.78      0.76      2868\n",
      "\n",
      "    accuracy                           0.99    237858\n",
      "   macro avg       0.87      0.89      0.88    237858\n",
      "weighted avg       0.99      0.99      0.99    237858\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from sklearn.linear_model.ridge import RidgeClassifier\n",
    "rc = RidgeClassifier()\n",
    "rc.fit(x_train, y_train)\n",
    "y_pred_rc = dtc.predict(x_test)\n",
    "\n",
    "cm_rc = pd.crosstab(y_pred_rc, y_test, rownames = ['pred'], colnames = ['true'], margins = True)\n",
    "report_rc = classification_report(y_test, y_pred_rc, labels = [0, 1])\n",
    "print(cm_rc, '\\n\\n', report_rc)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "8orSxmEOMURG"
   },
   "source": [
    "### f.) ADAoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "tCTyqU0NMT5M",
    "outputId": "6a220fd4-ec61-4865-ccb5-1d51ad3d5a18"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "true       0     1     All\n",
      "pred                      \n",
      "0     234676   852  235528\n",
      "1        314  2016    2330\n",
      "All   234990  2868  237858 \n",
      "\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00    234990\n",
      "           1       0.87      0.70      0.78      2868\n",
      "\n",
      "    accuracy                           1.00    237858\n",
      "   macro avg       0.93      0.85      0.89    237858\n",
      "weighted avg       0.99      1.00      0.99    237858\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "adab = AdaBoostClassifier()\n",
    "adab.fit(x_train, y_train)\n",
    "y_pred_adab = adab.predict(x_test)\n",
    "\n",
    "cm_adab = pd.crosstab(y_pred_adab, y_test, rownames = ['pred'], colnames = ['true'], margins = True)\n",
    "report_adab = classification_report(y_test, y_pred_adab, labels = [0, 1])\n",
    "print(cm_adab, '\\n\\n', report_adab)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "PLoM-CP2_jjO"
   },
   "source": [
    "## ii.) Cross-Validation\n",
    "Now that we have tested some classification models, we can use cross validation on the same algoithms that we used above. I will use 5 folds cross-validation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "a4DJCJq9zuoI",
    "outputId": "441fab4b-b742-42ce-dd77-2588f17c50de"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
      "  FutureWarning\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from sklearn.model_selection import KFold, cross_val_predict\n",
    "cross_val = KFold(n_splits = 10, random_state= 10, shuffle = False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Bb8nSx7zAWwv"
   },
   "source": [
    "### a.) Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "NUka9rtyAWKc",
    "outputId": "1fbab2d7-da30-44d9-fba0-59dc5eac092c"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "true       0     1     All\n",
      "pred                      \n",
      "0     352189  1643  353832\n",
      "1        264  2689    2953\n",
      "All   352453  4332  356785 \n",
      "\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00    352453\n",
      "           1       0.91      0.62      0.74      4332\n",
      "\n",
      "    accuracy                           0.99    356785\n",
      "   macro avg       0.95      0.81      0.87    356785\n",
      "weighted avg       0.99      0.99      0.99    356785\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "lr_cv = LogisticRegression()\n",
    "y_pred_lr_cv = cross_val_predict(lr_cv, x_train, y_train, cv = cross_val)\n",
    "cm_lr_cv = pd.crosstab(y_pred_lr_cv, y_train, rownames = ['pred'], colnames = ['true'], margins = True)\n",
    "report_lr_cv = classification_report(y_train, y_pred_lr_cv, labels = [0, 1])\n",
    "print(cm_lr_cv, '\\n\\n', report_lr_cv)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "2LK708jsWx_Q"
   },
   "source": [
    "### b.) RFC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "4NPmvv2vBs7H",
    "outputId": "68dc1477-63b1-4b9f-9140-d506ff43fae0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "true       0     1     All\n",
      "pred                      \n",
      "0     351969  1120  353089\n",
      "1        484  3212    3696\n",
      "All   352453  4332  356785 \n",
      "\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00    352453\n",
      "           1       0.87      0.74      0.80      4332\n",
      "\n",
      "    accuracy                           1.00    356785\n",
      "   macro avg       0.93      0.87      0.90    356785\n",
      "weighted avg       1.00      1.00      1.00    356785\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "rfc_cv = RandomForestClassifier()\n",
    "y_pred_rfc_cv = cross_val_predict(rfc_cv, x_train, y_train, cv = cross_val)\n",
    "cm_rfc_cv = pd.crosstab(y_pred_rfc_cv, y_train, rownames = ['pred'], colnames = ['true'], margins = True)\n",
    "report_rfc_cv = classification_report(y_train, y_pred_rfc_cv, labels = [0, 1])\n",
    "print(cm_rfc_cv, '\\n\\n', report_rfc_cv)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "i3NInQH9W3YB"
   },
   "source": [
    "### c.) DTC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "AxA0B82jYPl2",
    "outputId": "ab35b798-2cfa-4eb2-89b2-3cd5c06ddb81"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "true       0     1     All\n",
      "pred                      \n",
      "0     351328  1092  352420\n",
      "1       1125  3240    4365\n",
      "All   352453  4332  356785 \n",
      "\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00    352453\n",
      "           1       0.74      0.75      0.75      4332\n",
      "\n",
      "    accuracy                           0.99    356785\n",
      "   macro avg       0.87      0.87      0.87    356785\n",
      "weighted avg       0.99      0.99      0.99    356785\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "dtc_cv = DecisionTreeClassifier()\n",
    "y_pred_dtc_cv = cross_val_predict(dtc_cv, x_train, y_train, cv = cross_val)\n",
    "cm_dtc_cv = pd.crosstab(y_pred_dtc_cv, y_train, rownames = ['pred'], colnames = ['true'], margins = True)\n",
    "report_dtc_cv = classification_report(y_train, y_pred_dtc_cv, labels = [0, 1])\n",
    "print(cm_dtc_cv, '\\n\\n', report_dtc_cv)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WV6SN9MuYtCd"
   },
   "source": [
    "### d.) Ridge Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "id": "CrIpo3-EYvEU"
   },
   "outputs": [],
   "source": [
    "\n",
    "rc_cv = RidgeClassifier()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "6kOOta77OrPv"
   },
   "source": [
    "### e.) ADABoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "vGVgI8zkOq7r",
    "outputId": "31edbf17-d8f8-494d-9df5-c0511d6dd58a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "true       0     1     All\n",
      "pred                      \n",
      "0     352030  1358  353388\n",
      "1        423  2974    3397\n",
      "All   352453  4332  356785 \n",
      "\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00    352453\n",
      "           1       0.88      0.69      0.77      4332\n",
      "\n",
      "    accuracy                           1.00    356785\n",
      "   macro avg       0.94      0.84      0.88    356785\n",
      "weighted avg       0.99      1.00      0.99    356785\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "adab_cv = AdaBoostClassifier()\n",
    "y_pred_adab_cv = cross_val_predict(adab_cv, x_train, y_train, cv = cross_val)\n",
    "cm_adab_cv = pd.crosstab(y_pred_adab_cv, y_train, rownames = ['pred'], colnames = ['true'], margins = True)\n",
    "report_adab_cv = classification_report(y_train, y_pred_adab_cv, labels = [0, 1])\n",
    "print(cm_adab_cv, '\\n\\n', report_adab_cv)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Yuq0yeMlaoGI"
   },
   "source": [
    "Now since I have also tried the algorithms using cross-validation, I know that there are 30 columns in the x data, I can try using PCA (Principle Data Analysis) to reduce teh number of columns and then I will train all the above algorithms again on the PCA data. \n",
    "\n",
    "After that I will compare all the metrics using a table and then I will decide on the best model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 557
    },
    "id": "-OkhPOwPb1ph",
    "outputId": "2ac09340-8e18-49c5-9372-dee77ea49cad"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   customer  age  gender  merchant  category  amount  fraud\n",
      "0       210    4       2        30        12    4.55      0\n",
      "1      2753    2       2        30        12   39.68      0\n",
      "2      2285    4       1        18        12   26.89      0\n",
      "3      1650    3       2        30        12   17.25      0\n",
      "4      3585    5       2        30        12   35.72      0\n",
      "   customer  age  gender  merchant  category  amount\n",
      "0       210    4       2        30        12    4.55\n",
      "1      2753    2       2        30        12   39.68\n",
      "2      2285    4       1        18        12   26.89\n",
      "3      1650    3       2        30        12   17.25\n",
      "4      3585    5       2        30        12   35.72\n",
      "explained variance ratio:\n",
      "\n",
      " [9.91188343e-01 8.75286931e-03 5.21648564e-05 5.18593705e-06\n",
      " 1.25847043e-06 1.78590666e-07]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(data.head())\n",
    "\n",
    "cols = [\"customer\", \"age\", \"gender\", \"merchant\", \"category\", \"amount\"]\n",
    "data_x_pca = data[data.columns.difference([\"fraud\"])]\n",
    "data_x_pca = data_x_pca[cols]\n",
    "print(data_x_pca.head())\n",
    "\n",
    "\n",
    "import seaborn as sns\n",
    "from sklearn.decomposition import PCA, FactorAnalysis\n",
    "\n",
    "pca = PCA()\n",
    "data_x_pca = pca.fit(data_x_pca)\n",
    "pca_components = pca.components_\n",
    "\n",
    "print(\"explained variance ratio:\\n\\n\", pca.explained_variance_ratio_)\n",
    "\n",
    "var_ratio = pd.DataFrame({'var':pca.explained_variance_ratio_,\n",
    "             'PC':['pc1','pc2','pc3','pc4','pc5','pc6']})\n",
    "\n",
    "sns.barplot(x = 'PC', y = 'var', data=var_ratio, color=\"c\");\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Rk3wdfsZhwwX"
   },
   "source": [
    "PCA shows that only one variable can capture enough details to contribute to about 90% of the total variance. I will now do factor to reduce the data to 1 column.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "1OdgS47N4GQw"
   },
   "source": [
    "# Analysis\n",
    "\n",
    "Algorithm | Accuracy | True Positive (2840) | True Negative(235018) | \n",
    "----------|----------|----------------------|-----------------------|\n",
    "SVC       |1.00      |1858 (65.42%)         |234882 (99.94)         |\n",
    "LR        |0.99      |1786 (62.88%)         |234828 (99.91)         |\n",
    "RFC       |1.00      |2193 (76.46%)         |234729 (99.87)         |\n",
    "DTC       |0.99      |2141 (75.38%)         |234264 (99.67)         |\n",
    "Ridge     |0.99      |2141 (75.38%)         |234264 (99.67)         |\n",
    "ADABoost  |0.99      |1925 (67.78%)         |234728 (99.87)         |\n",
    "\n",
    "\n",
    "Using Cross-Validation\n",
    "\n",
    "Algorithm | Accuracy | True Positive (4360) | True Negative(352425) | \n",
    "----------|----------|----------------------|-----------------------|\n",
    "LR        |0.99      |2779 (63.73%)         |352121 (99.91%)        |\n",
    "RFC       |1.00      |3288 (75.41%)         |351956 (99.86%)        |\n",
    "SVC       |0.99      |2902 (66.55%)         |352078 (99.90%)        |\n",
    "DTC       |0.99      |3333 (76.44%)         |351271 (99.67%)        |\n",
    "Ridge     |0.99      |1544 (35.41%)         |352357 (99.98%)        |\n",
    "ADABoost  |0.99      |2992 (68.62%)         |351968 (99.87%)        |\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "7fp8g5lwF0b4"
   },
   "source": [
    "From this table, we can see that the highest acccuracy value for true positive values is after using the DTC algorithm using 10 fold cross validation with a 76.44% accuracy in predicting fraud values and 99.67% accuracy in predicting non-fraud values."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "2Jf11BeKGcs2"
   },
   "source": [
    "# Addressing the data Imbalance\n",
    "\n",
    "I will address the imbalance in the data by oversampling the fraud values using SMOTE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "DmK1aYy7GkAF",
    "outputId": "8bada31c-671e-4848-f7c4-62bafb96dbf3"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/sklearn/externals/six.py:31: FutureWarning: The module is deprecated in version 0.21 and will be removed in version 0.23 since we've dropped support for Python 2.7. Please rely on the official version of six (https://pypi.org/project/six/).\n",
      "  \"(https://pypi.org/project/six/).\", FutureWarning)\n",
      "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:144: FutureWarning: The sklearn.neighbors.base module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.neighbors. Anything that cannot be imported from sklearn.neighbors is now part of the private API.\n",
      "  warnings.warn(message, FutureWarning)\n",
      "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    587443\n",
      "0    587443\n",
      "Name: 0, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "\n",
    "data.head()\n",
    "data_x_over = data_x\n",
    "data_y_over = data_y\n",
    "\n",
    "from imblearn.over_sampling import SMOTE\n",
    "\n",
    "over = SMOTE()\n",
    "data_x_over, data_y_over = over.fit_resample(data_x_over, data_y_over)\n",
    "data_y_over = pd.DataFrame(data_y_over)\n",
    "print(data_y_over[0].value_counts())\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "id": "DKEXay3H742_"
   },
   "outputs": [],
   "source": [
    "x_over_train, x_over_test, y_over_train, y_over_test = train_test_split(data_x_over, data_y_over, train_size =0.7 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "HL18f0DP2bnf",
    "outputId": "95393b10-a951-4a9b-aa9e-ad25b59c08ab"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(352466,) (352466,)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "dtc.fit(x_over_train, y_over_train)\n",
    "y_pred_over = dtc.predict(x_over_test)\n",
    "y_pred_over = np.array(y_pred_over)\n",
    "y_over_test = np.array(y_over_test)\n",
    "y_over_test = y_over_test.reshape(-1,)\n",
    "print(y_pred_over.shape, y_over_test.shape)\n",
    "\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "K7ObB0Nc9qIK",
    "outputId": "7b23e5bc-2983-42d8-acf3-0db93376a1c1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "true       0       1     All\n",
      "pred                        \n",
      "0     174328    1676  176004\n",
      "1       2105  174357  176462\n",
      "All   176433  176033  352466 \n",
      "\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.99      0.99      0.99    176433\n",
      "           1       0.99      0.99      0.99    176033\n",
      "\n",
      "    accuracy                           0.99    352466\n",
      "   macro avg       0.99      0.99      0.99    352466\n",
      "weighted avg       0.99      0.99      0.99    352466\n",
      "\n"
     ]
    }
   ],
   "source": [
    "cm_dtc_over = pd.crosstab(y_pred_over, y_over_test, rownames = ['pred'], colnames = ['true'], margins = True)\n",
    "report_dtc_over = classification_report(y_over_test, y_pred_over, labels = [0, 1])\n",
    "print( cm_dtc_over, '\\n\\n', report_dtc_over)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "29WD338DVu8i"
   },
   "source": [
    "Here we can see that after oversampling the data, RFC gives correct prediction of 99% of both the fraud and not fraud transactions.\n",
    "\n",
    "# Conclusion\n",
    "\n",
    "If we use oversampling to remove the data, then we can easily predict the fraud and non-fraud transactions with an accuracy of 99% using RFC.\n",
    "\n",
    "However, if we do not use oversampling, then RFC gives the best results with prediction oaccuracy of 99% for non-fraud transactions and 76.44% for fraud transactions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "66XcUYhV_aJo"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "portfollio final.ipynb",
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
